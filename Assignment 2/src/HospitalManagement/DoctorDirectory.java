/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package HospitalManagement;

import com.mysql.cj.jdbc.result.ResultSetMetaData;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author roche
 */
public class DoctorDirectory extends javax.swing.JFrame {
    Connection con=null;
    PreparedStatement pst=null;
    ResultSet rs=null;

    /**
     * Creates new form DoctorDetails
     */
    public DoctorDirectory() {
        
        initComponents();
       con=Connect.ConnectDB();
        AutoID();
       Doctor_table();
    }
    
    public void AutoID(){
            try{
                Statement stmt;
                stmt= con.createStatement();
                rs = stmt.executeQuery("Select MAX(id) from doctor_details");
                rs.next();
                rs.getString("MAX(id)");
                if(rs.getString("MAX(id)")== null)
                {
                   jLabel3.setText("DS001");
                }
                else{
                    long id = Long.parseLong(rs.getString("MAX(id)").substring(2,rs.getString("MAX(id)" ).length()));
                    id++;
                    jLabel3.setText("DS"+ String.format("%03d", id));
                }
                
            }catch(HeadlessException | SQLException ex){
            JOptionPane.showMessageDialog(this,ex);
                
            }
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDoctorEmail = new javax.swing.JLabel();
        txtDoctorFirstName = new javax.swing.JTextField();
        txtDoctorLastName = new javax.swing.JTextField();
        txtDoctorZip = new javax.swing.JTextField();
        txtDoctorContact = new javax.swing.JTextField();
        txtDoctorEmail = new javax.swing.JTextField();
        lblDoctorZip = new javax.swing.JLabel();
        txtDoctorCity = new javax.swing.JTextField();
        lblFirstName = new javax.swing.JLabel();
        lblDoctorCity = new javax.swing.JLabel();
        lblLastName = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        lblDoctorAddress = new javax.swing.JLabel();
        lblDoctorContact = new javax.swing.JLabel();
        lblSpecilization = new javax.swing.JLabel();
        txtSpecialization = new javax.swing.JTextField();
        lblDoctorUsername = new javax.swing.JLabel();
        txtDoctorUsername = new javax.swing.JTextField();
        txtDoctorPassword = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        buttonSave = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        DoctorInfo = new javax.swing.JTable();
        buttonUpdate = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        buttonBack = new javax.swing.JButton();
        labelHospitalName = new javax.swing.JLabel();
        txtHospitalName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 204, 255));
        setMinimumSize(new java.awt.Dimension(1600, 800));

        lblDoctorEmail.setText("Email-id");

        txtDoctorEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorEmailActionPerformed(evt);
            }
        });

        lblDoctorZip.setText("Zip");

        txtDoctorCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorCityActionPerformed(evt);
            }
        });

        lblFirstName.setText("First Name");

        lblDoctorCity.setText("City");

        lblLastName.setText("Last Name");

        txtAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddressActionPerformed(evt);
            }
        });

        lblDoctorAddress.setText("Address Line1");

        lblDoctorContact.setText("Contact No.");

        lblSpecilization.setText("Specilization");

        txtSpecialization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSpecializationActionPerformed(evt);
            }
        });

        lblDoctorUsername.setText("Username");

        txtDoctorUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorUsernameActionPerformed(evt);
            }
        });

        txtDoctorPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorPasswordActionPerformed(evt);
            }
        });

        lblPassword.setText("Password");

        buttonSave.setText("Save");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        DoctorInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "DoctorID", "First Name", "Last Name", "Address", "City", "Zip", "Contact No", "Email id", "Specialization", "Hospital Name"
            }
        ));
        DoctorInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DoctorInfoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(DoctorInfo);

        buttonUpdate.setText("Update");
        buttonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateActionPerformed(evt);
            }
        });

        buttonDelete.setText("Delete");
        buttonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeleteActionPerformed(evt);
            }
        });

        jLabel1.setText("DoctorID");

        jLabel3.setText("jLabel3");

        buttonBack.setText("<<Back");
        buttonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBackActionPerformed(evt);
            }
        });

        labelHospitalName.setText("Hospital Name");

        txtHospitalName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHospitalNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonBack)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonSave)
                                .addGap(49, 49, 49)
                                .addComponent(buttonUpdate)
                                .addGap(50, 50, 50)
                                .addComponent(buttonDelete))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblFirstName)
                                    .addComponent(lblDoctorAddress)
                                    .addComponent(lblDoctorContact)
                                    .addComponent(lblDoctorEmail)
                                    .addComponent(lblDoctorZip)
                                    .addComponent(lblLastName)
                                    .addComponent(lblDoctorCity)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(lblDoctorUsername, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lblSpecilization, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelHospitalName))
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtHospitalName)
                                    .addComponent(txtDoctorPassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                                    .addComponent(txtDoctorFirstName, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtDoctorLastName, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtAddress, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtDoctorCity, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtDoctorZip, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtDoctorContact, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtDoctorEmail, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtSpecialization, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtDoctorUsername, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 817, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(672, 672, 672))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDoctorFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblFirstName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDoctorLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLastName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lblDoctorAddress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDoctorCity)
                    .addComponent(txtDoctorCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDoctorZip)
                    .addComponent(txtDoctorZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDoctorContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDoctorContact))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDoctorEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDoctorEmail))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSpecilization)
                    .addComponent(txtSpecialization, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelHospitalName)
                    .addComponent(txtHospitalName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDoctorUsername)
                    .addComponent(txtDoctorUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDoctorPassword))
                .addGap(81, 81, 81)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSave)
                    .addComponent(buttonUpdate)
                    .addComponent(buttonDelete))
                .addGap(111, 111, 111)
                .addComponent(buttonBack)
                .addGap(156, 156, 156))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtDoctorEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorEmailActionPerformed

    private void txtDoctorCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorCityActionPerformed

    private void txtAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddressActionPerformed

    private void txtSpecializationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSpecializationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSpecializationActionPerformed

    private void txtDoctorUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorUsernameActionPerformed

    private void txtDoctorPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorPasswordActionPerformed

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        // TODO add your handling code here:
        String id= jLabel3.getText();
        String firstname = txtDoctorFirstName.getText();
        String lastname = txtDoctorLastName.getText();
        String address = txtAddress.getText();
        String city = txtDoctorCity.getText();
        String zip = txtDoctorZip.getText();
        String contact = txtDoctorContact.getText();
        String email = txtDoctorEmail.getText();
        String spec = txtSpecialization.getText();
        String username = txtDoctorUsername.getText();
        String password = txtDoctorPassword.getText();
        String HospitalName = txtHospitalName.getText();
        try{
            
            if (txtDoctorFirstName.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Doctor's first name","Error", JOptionPane.ERROR_MESSAGE);
                return;

            }
            if (txtDoctorLastName.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Doctor's last name","Error", JOptionPane.ERROR_MESSAGE);
                return;

            }
            if (txtAddress.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Doctor's address","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txtDoctorCity.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter city","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txtDoctorZip.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Zip code","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txtDoctorContact.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Contact no","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
           if (txtDoctorEmail.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Email id","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
           if (txtSpecialization.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Specialization","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
         
            if (txtDoctorUsername.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Doctor's username","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txtDoctorPassword.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Doctor's password","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txtHospitalName.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Doctor's password","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
       Statement stmt;
       stmt= con.createStatement();
       String sql1="Select username from doctor_details where username= '" + txtDoctorUsername.getText() + "'";
       rs=stmt.executeQuery(sql1);
       if(rs.next()){
        JOptionPane.showMessageDialog( this, "Doctor Username already exists","Error", JOptionPane.ERROR_MESSAGE);
        txtDoctorUsername.setText("");
        txtDoctorUsername.requestDefaultFocus();
       return;
      }
            String sql= "Insert into doctor_details (id,first_name, last_name, address, city, zip, contact, email, specialization, username, password, hospitalname) value(?,?,?,?,?,?,?,?,?,?,?,?)";

            pst=con.prepareStatement(sql);
            pst.setString(1,id);
            pst.setString(2, firstname);
            pst.setString(3, lastname);
            pst.setString(4, address);
            pst.setString(5, city);
            pst.setString(6, zip);
            pst.setString(7, contact);
            pst.setString(8, email);
            pst.setString(9, spec);
            pst.setString(10, username);
            pst.setString(11, password);
            pst.setString(12, HospitalName);
            
            
            
            pst.execute();
            JOptionPane.showMessageDialog(this,"Successfully Registered","Doctor",JOptionPane.INFORMATION_MESSAGE);
            buttonSave.setEnabled(false);
            Doctor_table();
            Reset();
            AutoID();

        }catch(HeadlessException | SQLException ex){
            JOptionPane.showMessageDialog(this,ex);
        }
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void DoctorInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DoctorInfoMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)DoctorInfo.getModel();
        int SelectIndex = DoctorInfo.getSelectedRow();
        jLabel3.setText(model.getValueAt(SelectIndex, 0).toString());
        txtDoctorFirstName.setText(model.getValueAt(SelectIndex, 1).toString());
        txtDoctorLastName.setText(model.getValueAt(SelectIndex, 2).toString());
        txtAddress.setText(model.getValueAt(SelectIndex, 3).toString());
        txtDoctorCity.setText(model.getValueAt(SelectIndex, 4).toString());
        txtDoctorZip.setText(model.getValueAt(SelectIndex, 5).toString());
        txtDoctorContact.setText(model.getValueAt(SelectIndex, 6).toString());
        txtDoctorEmail.setText(model.getValueAt(SelectIndex, 7).toString());
        txtSpecialization.setText(model.getValueAt(SelectIndex, 8).toString());
        txtHospitalName.setText(model.getValueAt(SelectIndex, 9).toString());
        buttonSave.setVisible(false);
        
    }//GEN-LAST:event_DoctorInfoMouseClicked

    private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateActionPerformed
        // TODO add your handling code here:
        String id= jLabel3.getText();
        String firstname = txtDoctorFirstName.getText();
        String lastname = txtDoctorLastName.getText();
        String address = txtAddress.getText();
        String city = txtDoctorCity.getText();
        String zip = txtDoctorZip.getText();
        String contact = txtDoctorContact.getText();
        String email = txtDoctorEmail.getText();
        String spec = txtSpecialization.getText();
        String hospname = txtHospitalName.getText();
        try{
            
            if (txtDoctorFirstName.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Doctor's first name","Error", JOptionPane.ERROR_MESSAGE);
                return;

            }
            if (txtDoctorLastName.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Doctor's last name","Error", JOptionPane.ERROR_MESSAGE);
                return;

            }
            if (txtAddress.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Doctor's address","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txtDoctorCity.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter city","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txtDoctorZip.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Zip code","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txtDoctorContact.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Contact no","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
           if (txtDoctorEmail.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Email id","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
           if (txtSpecialization.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Specialization","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
           if (txtHospitalName.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Doctor's password","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
         
       Statement stmt;
       stmt= con.createStatement();
       String sql1="Select username from doctor_details where username= '" + txtDoctorUsername.getText() + "'";
      rs=stmt.executeQuery(sql1);
      if(rs.next()){
        JOptionPane.showMessageDialog( this, "Patient Username already exists","Error", JOptionPane.ERROR_MESSAGE);
        txtDoctorUsername.setText("");
        txtDoctorUsername.requestDefaultFocus();
       return;
      }
       
            String sql= "Update doctor_details set  first_name =?,last_name =?, address= ?, city = ?, zip = ?, contact = ?, email = ?, specialization = ?, hospitalname=? WHERE id=?";        
            
            pst=con.prepareStatement(sql);
            
            pst.setString(1, firstname);
            pst.setString(2, lastname);
            pst.setString(3, address);
            pst.setString(4, city);
            pst.setString(5, zip);
            pst.setString(6, contact);
            pst.setString(7, email);
            pst.setString(8, spec);
            pst.setString(9, hospname);
            pst.setString(10, id);
           
            
            
            
            pst.executeUpdate();
            JOptionPane.showMessageDialog(this,"Successfully Updated","Doctor",JOptionPane.INFORMATION_MESSAGE);
            buttonSave.setEnabled(false);
            
            txtDoctorFirstName.setText("");
            txtDoctorLastName.setText("");
            txtAddress.setText("");
            txtDoctorCity.setText("");
            txtDoctorZip.setText("");
            txtDoctorContact.setText("");
            txtDoctorEmail.setText("");
            txtSpecialization.setText("");
            txtHospitalName.setText("");
            
            Doctor_table();
            
            buttonSave.setEnabled(true);

        }catch(HeadlessException | SQLException ex){
            JOptionPane.showMessageDialog(this,ex);
        }
    }//GEN-LAST:event_buttonUpdateActionPerformed

    private void buttonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeleteActionPerformed
        // TODO add your handling code here:
        String id= jLabel3.getText();
                
        try{
            
            
         
       Statement stmt;
       stmt= con.createStatement();
       
      
      if(rs.next()){
       
       return;
      }
       
            String sql= "Delete from doctor_details where id=?";        
            
            pst=con.prepareStatement(sql);
            
            pst.setString(1, id);
            
           
            
            
            
            pst.executeUpdate();
            JOptionPane.showMessageDialog(this,"Successfully Deleted","Doctor",JOptionPane.INFORMATION_MESSAGE);
            buttonSave.setEnabled(false);
            
            AutoID();
            txtDoctorFirstName.setText("");
            txtDoctorLastName.setText("");
            txtAddress.setText("");
            txtDoctorCity.setText("");
            txtDoctorZip.setText("");
            txtDoctorContact.setText("");
            txtDoctorEmail.setText("");
            txtSpecialization.setText("");
            txtHospitalName.setText("");
            
            Doctor_table();
            
            buttonSave.setEnabled(true);

        }catch(HeadlessException | SQLException ex){
            JOptionPane.showMessageDialog(this,ex);
        }
        
    }//GEN-LAST:event_buttonDeleteActionPerformed

    private void buttonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBackActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_buttonBackActionPerformed

    private void txtHospitalNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHospitalNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHospitalNameActionPerformed
    


    
private void Reset()
{
    txtDoctorFirstName.setText("");
    txtDoctorLastName.setText("");
    txtAddress.setText("");
    txtDoctorCity.setText("");
    txtDoctorZip.setText("");
    txtDoctorContact.setText("");
    txtDoctorEmail.setText("");
    txtSpecialization.setText("");
    txtDoctorUsername.setText("");
    txtDoctorPassword.setText("");
    txtHospitalName.setText("");
    
    buttonSave.setEnabled(true);
   
}
private void Doctor_table(){
    try{
        pst = con.prepareCall("Select * from doctor_details");
        rs = pst.executeQuery();
        ResultSetMetaData result = (ResultSetMetaData) rs.getMetaData();
        int c;
        c=result.getColumnCount();
        
        DefaultTableModel model = (DefaultTableModel)DoctorInfo.getModel();
        model.setRowCount(0);
        
        while(rs.next()){
            Vector vector = new Vector();
            for(int i =1; i<=c ;i++){
                vector.add(rs.getString("id"));
                vector.add(rs.getString("first_name"));
                vector.add(rs.getString("last_name"));
                vector.add(rs.getString("address"));
                vector.add(rs.getString("city"));
                vector.add(rs.getString("zip"));
                vector.add(rs.getString("contact"));
                vector.add(rs.getString("email"));
                vector.add(rs.getString("specialization"));
                vector.add(rs.getString("hospitalname"));
            }
            model.addRow(vector);
        }
        
    }   catch (SQLException ex) {
            Logger.getLogger(DoctorDirectory.class.getName()).log(Level.SEVERE, null, ex);
        }
}
 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorDirectory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorDirectory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorDirectory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorDirectory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DoctorDirectory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DoctorInfo;
    private javax.swing.JButton buttonBack;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonSave;
    private javax.swing.JButton buttonUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelHospitalName;
    private javax.swing.JLabel lblDoctorAddress;
    private javax.swing.JLabel lblDoctorCity;
    private javax.swing.JLabel lblDoctorContact;
    private javax.swing.JLabel lblDoctorEmail;
    private javax.swing.JLabel lblDoctorUsername;
    private javax.swing.JLabel lblDoctorZip;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblSpecilization;
    public javax.swing.JTextField txtAddress;
    public javax.swing.JTextField txtDoctorCity;
    public javax.swing.JTextField txtDoctorContact;
    public javax.swing.JTextField txtDoctorEmail;
    public javax.swing.JTextField txtDoctorFirstName;
    public javax.swing.JTextField txtDoctorLastName;
    public javax.swing.JTextField txtDoctorPassword;
    public javax.swing.JTextField txtDoctorUsername;
    public javax.swing.JTextField txtDoctorZip;
    public javax.swing.JTextField txtHospitalName;
    public javax.swing.JTextField txtSpecialization;
    // End of variables declaration//GEN-END:variables
}
