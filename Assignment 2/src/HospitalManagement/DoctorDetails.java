/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package HospitalManagement;

import com.mysql.cj.jdbc.result.ResultSetMetaData;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author roche
 */
public class DoctorDetails extends javax.swing.JFrame {
    Connection con=null;
    PreparedStatement pst=null;
    ResultSet rs=null;

    /**
     * Creates new form DoctorDetails
     */
    public DoctorDetails() {
        
        initComponents();
       con=Connect.ConnectDB();
    
       Doctor_table();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblDoctorEmail = new javax.swing.JLabel();
        txtDoctorFirstName = new javax.swing.JTextField();
        txtDoctorLastName = new javax.swing.JTextField();
        txtDoctorZip = new javax.swing.JTextField();
        txtDoctorContact = new javax.swing.JTextField();
        txtDoctorEmail = new javax.swing.JTextField();
        lblDoctorZip = new javax.swing.JLabel();
        txtDoctorCity = new javax.swing.JTextField();
        lblFirstName = new javax.swing.JLabel();
        lblDoctorCity = new javax.swing.JLabel();
        lblLastName = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        lblDoctorAddress = new javax.swing.JLabel();
        lblDoctorContact = new javax.swing.JLabel();
        lblSpecilization = new javax.swing.JLabel();
        txtSpecialization = new javax.swing.JTextField();
        lblDoctorUsername = new javax.swing.JLabel();
        txtDoctorUsername = new javax.swing.JTextField();
        txtDoctorPassword = new javax.swing.JTextField();
        lblPassword = new javax.swing.JLabel();
        buttonSave = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        DoctorInfo = new javax.swing.JTable();
        buttonUpdate = new javax.swing.JButton();
        buttonDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1600, 800));

        lblDoctorEmail.setText("Email-id");

        txtDoctorEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorEmailActionPerformed(evt);
            }
        });

        lblDoctorZip.setText("Zip");

        txtDoctorCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorCityActionPerformed(evt);
            }
        });

        lblFirstName.setText("First Name");

        lblDoctorCity.setText("City");

        lblLastName.setText("Last Name");

        txtAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddressActionPerformed(evt);
            }
        });

        lblDoctorAddress.setText("Address Line1");

        lblDoctorContact.setText("Contact No.");

        lblSpecilization.setText("Specilization");

        txtSpecialization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSpecializationActionPerformed(evt);
            }
        });

        lblDoctorUsername.setText("Username");

        txtDoctorUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorUsernameActionPerformed(evt);
            }
        });

        txtDoctorPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDoctorPasswordActionPerformed(evt);
            }
        });

        lblPassword.setText("Password");

        buttonSave.setText("Save");
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        DoctorInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "First Name", "Last Name", "Address", "City", "Zip", "Contact No", "Email id", "Specialization"
            }
        ));
        DoctorInfo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DoctorInfoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(DoctorInfo);

        buttonUpdate.setText("Update");
        buttonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateActionPerformed(evt);
            }
        });

        buttonDelete.setText("Delete");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonSave)
                        .addGap(49, 49, 49)
                        .addComponent(buttonUpdate)
                        .addGap(50, 50, 50)
                        .addComponent(buttonDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFirstName)
                            .addComponent(lblDoctorAddress)
                            .addComponent(lblDoctorContact)
                            .addComponent(lblDoctorEmail)
                            .addComponent(lblDoctorZip)
                            .addComponent(lblLastName)
                            .addComponent(lblDoctorCity)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lblDoctorUsername, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblSpecilization, javax.swing.GroupLayout.Alignment.LEADING))
                            .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtDoctorPassword)
                            .addComponent(txtDoctorFirstName, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                            .addComponent(txtDoctorLastName)
                            .addComponent(txtAddress)
                            .addComponent(txtDoctorCity)
                            .addComponent(txtDoctorZip)
                            .addComponent(txtDoctorContact)
                            .addComponent(txtDoctorEmail)
                            .addComponent(txtSpecialization)
                            .addComponent(txtDoctorUsername))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 817, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(672, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(lblFirstName)
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtDoctorFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblLastName)
                        .addGap(18, 18, 18)
                        .addComponent(lblDoctorAddress)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(txtDoctorLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblDoctorCity)
                    .addComponent(txtDoctorCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDoctorZip)
                    .addComponent(txtDoctorZip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDoctorContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDoctorContact))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDoctorEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDoctorEmail))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSpecilization)
                    .addComponent(txtSpecialization, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDoctorUsername)
                    .addComponent(txtDoctorUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDoctorPassword))
                .addGap(90, 90, 90)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSave)
                    .addComponent(buttonUpdate)
                    .addComponent(buttonDelete))
                .addContainerGap(303, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtDoctorEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorEmailActionPerformed

    private void txtDoctorCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorCityActionPerformed

    private void txtAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddressActionPerformed

    private void txtSpecializationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSpecializationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSpecializationActionPerformed

    private void txtDoctorUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorUsernameActionPerformed

    private void txtDoctorPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDoctorPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDoctorPasswordActionPerformed

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        // TODO add your handling code here:
        
        String firstname = txtDoctorFirstName.getText();
        String lastname = txtDoctorLastName.getText();
        String address = txtAddress.getText();
        String city = txtDoctorCity.getText();
        String zip = txtDoctorZip.getText();
        String contact = txtDoctorContact.getText();
        String email = txtDoctorEmail.getText();
        String spec = txtSpecialization.getText();
        String username = txtDoctorUsername.getText();
        String password = txtDoctorPassword.getText();
        try{
            
            if (txtDoctorFirstName.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Doctor's first name","Error", JOptionPane.ERROR_MESSAGE);
                return;

            }
            if (txtDoctorLastName.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Doctor's last name","Error", JOptionPane.ERROR_MESSAGE);
                return;

            }
            if (txtAddress.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Doctor's address","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txtDoctorCity.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter city","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txtDoctorZip.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Zip code","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txtDoctorContact.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Contact no","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
           if (txtDoctorEmail.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Email id","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
           if (txtSpecialization.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Specialization","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
         
            if (txtDoctorUsername.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Doctor's username","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txtDoctorPassword.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Doctor's password","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
       Statement stmt;
       stmt= con.createStatement();
       String sql1="Select username from doctor_details where username= '" + txtDoctorUsername.getText() + "'";
       rs=stmt.executeQuery(sql1);
       if(rs.next()){
        JOptionPane.showMessageDialog( this, "Doctor Username already exists","Error", JOptionPane.ERROR_MESSAGE);
        txtDoctorUsername.setText("");
        txtDoctorUsername.requestDefaultFocus();
       return;
      }
            String sql= "Insert into doctor_details (first_name, last_name, address, city, zip, contact, email, specialization, username, password) value(?,?,?,?,?,?,?,?,?,?)";

            pst=con.prepareStatement(sql);
            pst.setString(1, firstname);
            pst.setString(2, lastname);
            pst.setString(3, address);
            pst.setString(4, city);
            pst.setString(5, zip);
            pst.setString(6, contact);
            pst.setString(7, email);
            pst.setString(8, spec);
            pst.setString(9, username);
            pst.setString(10, password);
            
            
            
            pst.execute();
            JOptionPane.showMessageDialog(this,"Successfully Registered","Doctor",JOptionPane.INFORMATION_MESSAGE);
            buttonSave.setEnabled(false);
            Doctor_table();
            Reset();

        }catch(HeadlessException | SQLException ex){
            JOptionPane.showMessageDialog(this,ex);
        }
    }//GEN-LAST:event_buttonSaveActionPerformed

    private void DoctorInfoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DoctorInfoMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)DoctorInfo.getModel();
        int SelectIndex = DoctorInfo.getSelectedRow();
        
        txtDoctorFirstName.setText(model.getValueAt(SelectIndex, 0).toString());
        txtDoctorLastName.setText(model.getValueAt(SelectIndex, 1).toString());
        txtAddress.setText(model.getValueAt(SelectIndex, 2).toString());
        txtDoctorCity.setText(model.getValueAt(SelectIndex, 3).toString());
        txtDoctorZip.setText(model.getValueAt(SelectIndex, 4).toString());
        txtDoctorContact.setText(model.getValueAt(SelectIndex, 5).toString());
        txtDoctorEmail.setText(model.getValueAt(SelectIndex, 6).toString());
        txtSpecialization.setText(model.getValueAt(SelectIndex, 7).toString());
        
        buttonSave.setVisible(false);
    }//GEN-LAST:event_DoctorInfoMouseClicked

    private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateActionPerformed
        // TODO add your handling code here:
        String firstname = txtDoctorFirstName.getText();
        String lastname = txtDoctorLastName.getText();
        String address = txtAddress.getText();
        String city = txtDoctorCity.getText();
        String zip = txtDoctorZip.getText();
        String contact = txtDoctorContact.getText();
        String email = txtDoctorEmail.getText();
        String spec = txtSpecialization.getText();
        String username = txtDoctorUsername.getText();
        String password = txtDoctorPassword.getText();
        try{
            
            if (txtDoctorFirstName.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Doctor's first name","Error", JOptionPane.ERROR_MESSAGE);
                return;

            }
            if (txtDoctorLastName.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Doctor's last name","Error", JOptionPane.ERROR_MESSAGE);
                return;

            }
            if (txtAddress.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Doctor's address","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txtDoctorCity.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter city","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txtDoctorZip.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Zip code","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (txtDoctorContact.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Contact no","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
           if (txtDoctorEmail.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Email id","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
           if (txtSpecialization.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Specialization","Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
         
       Statement stmt;
       stmt= con.createStatement();
       String sql1="Select username from doctor_details where username= '" + txtDoctorUsername.getText() + "'";
       rs=stmt.executeQuery(sql1);
       if(rs.next()){
        JOptionPane.showMessageDialog( this, "Doctor Username already exists","Error", JOptionPane.ERROR_MESSAGE);
        txtDoctorUsername.setText("");
        txtDoctorUsername.requestDefaultFocus();
       return;
      }
            String sql= "Update doctor_details set first_name = ?, last_name = ?, address = ?, city = ?, zip = ?, contact = ?, email = ?, specialization = ?";
            pst=con.prepareStatement(sql);
            pst.setString(1, firstname);
            pst.setString(2, lastname);
            pst.setString(3, address);
            pst.setString(4, city);
            pst.setString(5, zip);
            pst.setString(6, contact);
            pst.setString(7, email);
            pst.setString(8, spec);
           
            
            
            
            pst.executeUpdate();
            JOptionPane.showMessageDialog(this,"Successfully Updated","Doctor",JOptionPane.INFORMATION_MESSAGE);
            buttonSave.setEnabled(false);
            Doctor_table();
            
            buttonSave.setEnabled(true);

        }catch(HeadlessException | SQLException ex){
            JOptionPane.showMessageDialog(this,ex);
        }
    }//GEN-LAST:event_buttonUpdateActionPerformed
    


    
private void Reset()
{
    txtDoctorFirstName.setText("");
    txtDoctorLastName.setText("");
    txtAddress.setText("");
    txtDoctorCity.setText("");
    txtDoctorZip.setText("");
    txtDoctorContact.setText("");
    txtDoctorEmail.setText("");
    txtSpecialization.setText("");
    txtDoctorUsername.setText("");
    txtDoctorPassword.setText("");
    
    buttonSave.setEnabled(true);
   
}
private void Doctor_table(){
    try{
        pst = con.prepareCall("Select * from doctor_details");
        rs = pst.executeQuery();
        ResultSetMetaData result = (ResultSetMetaData) rs.getMetaData();
        int c;
        c=result.getColumnCount();
        
        DefaultTableModel model = (DefaultTableModel)DoctorInfo.getModel();
        model.setRowCount(0);
        
        while(rs.next()){
            Vector vector = new Vector();
            for(int i =1; i<=c;i++){
                vector.add(rs.getString("first_name"));
                vector.add(rs.getString("last_name"));
                vector.add(rs.getString("address"));
                vector.add(rs.getString("city"));
                vector.add(rs.getString("zip"));
                vector.add(rs.getString("contact"));
                vector.add(rs.getString("email"));
                vector.add(rs.getString("specialization"));
                
            }
            model.addRow(vector);
        }
        
    }   catch (SQLException ex) {
            Logger.getLogger(DoctorDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
}
 
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DoctorDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DoctorDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DoctorDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DoctorDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DoctorDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DoctorInfo;
    private javax.swing.JButton buttonDelete;
    private javax.swing.JButton buttonSave;
    private javax.swing.JButton buttonUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDoctorAddress;
    private javax.swing.JLabel lblDoctorCity;
    private javax.swing.JLabel lblDoctorContact;
    private javax.swing.JLabel lblDoctorEmail;
    private javax.swing.JLabel lblDoctorUsername;
    private javax.swing.JLabel lblDoctorZip;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblSpecilization;
    public javax.swing.JTextField txtAddress;
    public javax.swing.JTextField txtDoctorCity;
    public javax.swing.JTextField txtDoctorContact;
    public javax.swing.JTextField txtDoctorEmail;
    public javax.swing.JTextField txtDoctorFirstName;
    public javax.swing.JTextField txtDoctorLastName;
    public javax.swing.JTextField txtDoctorPassword;
    public javax.swing.JTextField txtDoctorUsername;
    public javax.swing.JTextField txtDoctorZip;
    public javax.swing.JTextField txtSpecialization;
    // End of variables declaration//GEN-END:variables
}
