/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package HospitalManagement;

import Hospital.HospitalData;
import Hospital.HospitalData;
import Hospital.HospitalDirectory;
import HospitalManagement.Connect;
import com.mysql.cj.jdbc.result.ResultSetMetaData;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author roche
 */
public class CreateHospital extends javax.swing.JFrame {
    Connection con=null;
    PreparedStatement pst=null;
    ResultSet rs=null; 
    HospitalDirectory hospitaldirectory;
    HospitalData data;
    
      
    /**
     * Creates new form CreateHospital
     */
      
    public CreateHospital() {
        
        initComponents();
         con=Connect.ConnectDB();
        //HospitalData hd;
         Hospital_table();
        
        hospitaldirectory = new HospitalDirectory();
      this.hospitaldirectory = hospitaldirectory;
      data = new HospitalData();
      this.data =  data;
      //Hospital_table();
      //populateTable();
      
    
    
   }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblHospitalName = new javax.swing.JLabel();
        comboCommunity = new javax.swing.JComboBox<>();
        lblCommunity = new javax.swing.JLabel();
        txtHospitalName = new javax.swing.JTextField();
        buttonAdd = new javax.swing.JButton();
        buttonUpdate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableHospitalData = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblHospitalName.setText("Hospital Name");

        comboCommunity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Community", "Roxbury", "Longwood", "Brooklyn" }));

        lblCommunity.setText("Community");

        buttonAdd.setText("Save");
        buttonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAddActionPerformed(evt);
            }
        });

        buttonUpdate.setText("Update");
        buttonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonUpdateActionPerformed(evt);
            }
        });

        tableHospitalData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Community", "Hospital Name"
            }
        ));
        tableHospitalData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableHospitalDataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableHospitalData);

        jButton1.setText("<<Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblHospitalName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblCommunity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(buttonAdd)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(156, 156, 156)
                                .addComponent(buttonUpdate))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtHospitalName, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(comboCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))))
                .addContainerGap(928, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCommunity))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHospitalName, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtHospitalName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAdd)
                    .addComponent(buttonUpdate))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 231, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addComponent(jButton1)
                .addContainerGap(313, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void buttonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAddActionPerformed
        // TODO add your handling code here:
        
        String HospitalArea = comboCommunity.getSelectedItem().toString();
        String HospitalName = txtHospitalName.getText();
                    
        //HospitalData hd = hospitaldirectory.addNewInfo();
        //hd.setHospitalArea(HospitalArea);
        //hd.setHospitalName(HospitalName);
        
      
       
      
       try{
           if (comboCommunity.getSelectedItem().equals("Select Community"))  {
                JOptionPane.showMessageDialog( this, "Please select Community","Error", JOptionPane.ERROR_MESSAGE);
                return;

            }
            if (txtHospitalName.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Hospital Name","Error", JOptionPane.ERROR_MESSAGE);
                return;

            }

           
            
            Statement stmt;
            stmt= con.createStatement();
            String sql1="Select hospital_name  from hospital_directory where hospital_name= '" + txtHospitalName.getText() + "'";
            rs=stmt.executeQuery(sql1);
            if(rs.next()){
            JOptionPane.showMessageDialog( this, "Patient Username already exists","Error", JOptionPane.ERROR_MESSAGE);
            txtHospitalName.setText("");
            txtHospitalName.requestDefaultFocus();
       return;
      }
            String sql= "Insert into hospital_directory (hospital_area, hospital_name) value(?,?)";

            pst=con.prepareStatement(sql);
            pst.setString(1, HospitalArea);
            pst.setString(2, HospitalName);
            pst.execute();
            JOptionPane.showMessageDialog(this,"Successfully Registered","Patient",JOptionPane.INFORMATION_MESSAGE);
            //buttonAdd.setEnabled(false);
            Hospital_table();
            clearField();

        }catch(HeadlessException | SQLException ex){
            JOptionPane.showMessageDialog(this,ex);
        }
        
        
        
        
    }//GEN-LAST:event_buttonAddActionPerformed

    private void tableHospitalDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableHospitalDataMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tableHospitalData.getModel();
        
        String updatedCommunity = model.getValueAt(tableHospitalData.getSelectedRow(), 0).toString();
        String updatedName = model.getValueAt(tableHospitalData.getSelectedRow(), 1).toString();
        
        comboCommunity.setSelectedItem(updatedCommunity);
        txtHospitalName.setText(updatedName);
        
        //comboCommunity.setSelectedIndex(0);
        //txtHospitalName.setText("");
    }//GEN-LAST:event_tableHospitalDataMouseClicked

    private void buttonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonUpdateActionPerformed
        // TODO add your handling code here:
        String HospitalArea = comboCommunity.getSelectedItem().toString();
           String HospitalName = txtHospitalName.getText();
        DefaultTableModel model = (DefaultTableModel) tableHospitalData.getModel();
       if(tableHospitalData.getSelectedRowCount ()==1){
          // String HospitalArea = comboCommunity.getSelectedItem().toString();
          // String HospitalName = txtHospitalName.getText();
            
            
            model.setValueAt(HospitalArea, tableHospitalData.getSelectedRow(), 0);
            model.setValueAt(HospitalName, tableHospitalData.getSelectedRow(), 1);
                        
            JOptionPane.showMessageDialog(this, "Details updated successfully");
           
       
       }else{
           if(tableHospitalData.getRowCount()==0){
               JOptionPane.showMessageDialog(this, "Please enter details");
           }
           else{
               JOptionPane.showMessageDialog(this, "Please select a row");
           }  
       }
       try{
            
            if (comboCommunity.getSelectedItem().toString().equals("Select Community")) {
                JOptionPane.showMessageDialog( this, "Please select Community","Error", JOptionPane.ERROR_MESSAGE);
                return;

            }
            if (txtHospitalName.getText().equals("")) {
                JOptionPane.showMessageDialog( this, "Please enter Hospital Name","Error", JOptionPane.ERROR_MESSAGE);
                return;

            }
            
       Statement stmt;
       stmt= con.createStatement();
       
       //rs=stmt.executeQuery();
      if(rs.next()){
        //JOptionPane.showMessageDialog( this, "Patient Username already exists","Error", JOptionPane.ERROR_MESSAGE);
        txtHospitalName.setText("");
        txtHospitalName.requestDefaultFocus();
       return;
      }
       
            String sql= "Update hospital_directory set hospital_area =?, hospital_name =?";        
            
            pst=con.prepareStatement(sql);
            
            pst.setString(1, HospitalArea);
            pst.setString(2, HospitalName);
            
            
            
            
            pst.executeUpdate();
            JOptionPane.showMessageDialog(this,"Successfully Updated","Hospital",JOptionPane.INFORMATION_MESSAGE);
            buttonAdd.setEnabled(false);
            
            comboCommunity.setSelectedIndex(0);
            txtHospitalName.setText("");
            
             
            Hospital_table();
            
            buttonAdd.setEnabled(true);

        }catch(HeadlessException | SQLException ex){
            JOptionPane.showMessageDialog(this,ex);
        }
   
        
        
    }//GEN-LAST:event_buttonUpdateActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void clearField(){
        comboCommunity.setSelectedIndex(0);
        txtHospitalName.setText("");
    }
    
    private void Hospital_table(){
    try{
        pst = con.prepareCall("Select * from hospital_directory");
        rs = pst.executeQuery();
        ResultSetMetaData result = (ResultSetMetaData) rs.getMetaData();
        int c;
        c=result.getColumnCount();
        
        DefaultTableModel model = (DefaultTableModel)tableHospitalData.getModel();
        model.setRowCount(0);
        
        while(rs.next()){
            Vector vector = new Vector();
            for(int i =1; i<=c;i++){
                vector.add(rs.getString("hospital_area"));
                vector.add(rs.getString("hospital_name"));
                
                
            }
            model.addRow(vector);
        }
        
    }   catch (SQLException ex) {
            Logger.getLogger(DoctorDirectory.class.getName()).log(Level.SEVERE, null, ex);
        }
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateHospital.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateHospital.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateHospital.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateHospital.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateHospital().setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAdd;
    private javax.swing.JButton buttonUpdate;
    private javax.swing.JComboBox<String> comboCommunity;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblHospitalName;
    private javax.swing.JTable tableHospitalData;
    private javax.swing.JTextField txtHospitalName;
    // End of variables declaration//GEN-END:variables

private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tableHospitalData.getModel();
        model.setRowCount(0);
        
        for (HospitalData hd : hospitaldirectory.getHospitaldirectory()){
            
            Object[] row = new Object[2];
            row[0] = hd.getHospitalArea();
            row[1] = hd.getHospitalName();
            
            model.addRow(row);
        }
        }
}

